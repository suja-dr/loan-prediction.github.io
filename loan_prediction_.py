# -*- coding: utf-8 -*-
"""Loan_Prediction_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bKldBRHy7GWS-p3gGPciPWV-1d9Bmyco
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/loan_dataset.csv')
df

df.duplicated().sum()

df.head(10)

df1 = df.copy()
df1

df1.to_csv('Cleaned_loan.csv', index=False)

df2 = pd.read_csv('/content/Cleaned_loan.csv')
df2

df2.columns

plt.hist(df2['Loan_Amount'], color='skyblue')
plt.show()

df_sorted = df2.sort_values(by='Loan_Amount')
plt.figure(figsize=(10,6))
plt.plot(df_sorted['Loan_Amount'], df_sorted['DTI_Ratio'], color='green')
plt.ylabel('Loan_Amount')
plt.xlabel('DTI_Ratio')
plt.title('Loan_Amount vs DTI_Ratio')
plt.grid(True)
plt.show()

plt.figure(figsize=(10,6))
plt.scatter(df2['Credit_Score'], df2['Loan_Amount'], color='green', s=10, alpha=0.6)
plt.xlabel('Credit_Score')
plt.ylabel('Loan_Amount')
plt.grid(True)
plt.show()

df['Credit_Score'].fillna(df['Credit_Score'].mean(), inplace=True)
sns.heatmap(df[['DTI_Ratio','Income','Loan_Amount']].corr(), annot=True,cmap='coolwarm')
plt.show()

plt.figure(figsize=(10, 5))
sns.countplot(data=df, x='Approval', palette='Set1')
plt.show()

X = df[['Income']]
y = (df['Loan_Amount'] > 50000).astype(int)

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

model = LogisticRegression()
model.fit(X_train_scaled, y_train)

y_pred = model.predict(X_test_scaled)
y_proba = model.predict_proba(X_test_scaled)[:, 1]

X_test_array = X_test.values.squeeze()
sorted_idx = np.argsort(X_test_array)

plt.figure(figsize=(8, 6))
plt.scatter(X_test_array, y_test, color='blue', alpha=0.6, label='Actual')
plt.scatter(X_test_array, y_pred, color='red', alpha=0.6, label='Predicted')
plt.plot(X_test_array[sorted_idx], y_proba[sorted_idx], color='green', linewidth=2, label='Logistic Curve')

plt.axhline(0.5, color='gray', linestyle='--', linewidth=1, label='Decision Threshold (0.5)')

plt.xlabel('Income')
plt.ylabel('Approval Probability')
plt.title('Logistic Regression (Scaled): Actual vs Predicted with Curve & Threshold')
plt.legend()
plt.show()

from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, y_pred)
print(f"Logistic Regression Accuracy: {accuracy:.4f}")

import pickle
from sklearn.preprocessing import LabelEncoder

categorical_columns = ['Employment_Status', 'Approval']

label_encoders = {}
for col in categorical_columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

pickle.dump(model, open("loan_model.pkl", "wb"))
pickle.dump(scaler, open("loan_scaler.pkl", "wb"))
pickle.dump(label_encoders, open("loan_label_encoders.pkl", "wb"))

print("Model training done and files saved.")

model = pickle.load(open("loan_model.pkl", "rb"))

from google.colab import drive
drive.mount('/content/drive')

!pip install streamlit

!pip install streamlit pyngrok -q

# Commented out IPython magic to ensure Python compatibility.
# %%writefile streamlitapp.py
# import streamlit as st
# import pandas as pd
# import matplotlib.pyplot as plt
# import seaborn as sns
# 
# st.set_page_config(page_title="Loan Prediction", page_icon="ðŸ’³")
# 
# st.title("ðŸ’³ Simple Loan Approval Prediction")
# 
# uploaded_file = st.file_uploader("Upload your dataset (CSV)", type=["csv"])
# 
# if uploaded_file is not None:
#     df = pd.read_csv(uploaded_file)
#     df['Credit_Score'].fillna(df['Credit_Score'].mean(), inplace=True)
# 
#     st.subheader("Enter Details")
#     income = st.number_input("Income:", min_value=0, max_value=500000, value=40000)
#     loan = st.number_input("Loan Amount:", min_value=0, max_value=500000, value=30000)
# 
#     if st.button("Check Loan"):
#         if loan < 0.5 * income:
#             st.success("Loan Approved!")
#             predicted_status = 1
#         else:
#             st.error("Loan Rejected")
#             predicted_status = 0
# 
#         new_row = pd.DataFrame({
#             "Income": [income],
#             "Loan_Amount": [loan],
#             "Credit_Score": [0],
#             "Employment_Status": ["Unknown"],
#             "Approval": [predicted_status]
#         })
#         df_plot = pd.concat([df, new_row], ignore_index=True)
#     else:
#         df_plot = df.copy()
# 
#     if st.checkbox("ðŸ“Š Show Charts"):
#         st.subheader("1. Loan Amount Distribution by Approval")
#         fig1, ax1 = plt.subplots()
#         sns.histplot(df_plot, x="Loan_Amount", hue="Approval", bins=20, kde=True, palette="Set1", ax=ax1)
#         ax1.set_title("Loan Amount Distribution by Approval")
#         st.pyplot(fig1)
# 
#         st.subheader("2. Income vs Loan Amount (by Approval)")
#         fig2, ax2 = plt.subplots()
#         sns.scatterplot(x="Income", y="Loan_Amount", hue="Approval", data=df_plot, ax=ax2, alpha=0.6, palette="Set1")
#         ax2.set_title("Income vs Loan Amount by Approval")
#         st.pyplot(fig2)
# 
#         st.subheader("3. Credit Score vs Loan Amount (by Approval)")
#         fig3, ax3 = plt.subplots()
#         sns.scatterplot(x="Credit_Score", y="Loan_Amount", hue="Approval", data=df_plot, ax=ax3, palette="Set1")
#         ax3.set_title("Credit Score vs Loan Amount by Approval")
#         st.pyplot(fig3)
# 
#         st.subheader("4. Employment Status vs Approval")
#         fig4, ax4 = plt.subplots()
#         sns.countplot(x="Employment_Status", hue="Approval", data=df_plot, palette="Set2", ax=ax4)
#         plt.xticks(rotation=30)
#         ax4.set_title("Employment Status vs Approval")
#         st.pyplot(fig4)
# 
#         st.subheader("5. Approval Count")
#         fig5, ax5 = plt.subplots()
#         sns.countplot(x="Approval", data=df_plot, palette="pastel", ax=ax5)
#         ax5.set_title("Loan Approval Count")
#         st.pyplot(fig5)
# 
#         st.subheader("6. Correlation Heatmap")
#         fig6, ax6 = plt.subplots(figsize=(6,4))
#         sns.heatmap(df_plot[["Income","Loan_Amount","Credit_Score"]].corr(), annot=True, cmap="coolwarm", ax=ax6)
#         ax6.set_title("Correlation Heatmap of Key Features")
#         st.pyplot(fig6)
# 
# else:
#     st.info("Please upload a CSV file to proceed.")
#

from pyngrok import ngrok

# Add your token here (replace with your own from ngrok dashboard)
ngrok.set_auth_token("31JHrLh8lgbJ48ecaNtYTjoKmMr_4iCug9T75FYwnUns2V9EM")

import threading, time, subprocess
from pyngrok import ngrok

def run_app():
    subprocess.Popen(["streamlit", "run", "streamlitapp.py", "--server.port=8501", "--server.headless", "true"])

threading.Thread(target=run_app).start()
time.sleep(5)

public_url = ngrok.connect(8501)
print(" App running at:", public_url)